// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Validator__Core2 = require("./Validator__Core2.js");

function isShorterThan(length) {
  var name = "isShorterThan(" + length + ")";
  return Validator__Core2.make(name, (function (value) {
                return Validator__Core2.defaultErrorMessage(undefined, name, value);
              }), (function (str) {
                return str.length < length;
              }));
}

function isLongerThan(length) {
  var name = "isLongerThan(" + length + ")";
  return Validator__Core2.make(name, (function (value) {
                return Validator__Core2.defaultErrorMessage(undefined, name, value);
              }), (function (str) {
                return str.length > length;
              }));
}

var isHelloWorld = Validator__Core2.make("isHelloWorld", undefined, (function (str) {
        var match = str.trim().toLowerCase();
        switch (match) {
          case "hello  world" :
          case "hello  world!" :
          case "hello world" :
          case "hello world!" :
          case "helloworld" :
          case "helloworld!" :
              return true;
          default:
            return false;
        }
      }));

var emailRegex = /^(([^<>()\[\]\.,;:\s@"]+(\.[^<>()\[\]\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

var name = "isEmail";

var isEmail = Validator__Core2.make(name, (function (value) {
        return Validator__Core2.defaultErrorMessage(undefined, name, value);
      }), (function (str) {
        return emailRegex.test(str);
      }));

var name$1 = "isNotEmpty";

var isNotEmpty = Validator__Core2.make(name$1, (function (value) {
        return Validator__Core2.defaultErrorMessage(undefined, name$1, value);
      }), (function (str) {
        return str !== "";
      }));

var name$2 = "isEmpty";

var isEmpty = Validator__Core2.make(name$2, (function (value) {
        return Validator__Core2.defaultErrorMessage(undefined, name$2, value);
      }), (function (str) {
        return str === "";
      }));

var whitespaceRegex = /\s/g;

var name$3 = "containsWhitespaceChar";

var containsWhitespaceChar = Validator__Core2.make(name$3, (function (value) {
        return Validator__Core2.defaultErrorMessage(undefined, name$3, value);
      }), (function (str) {
        return whitespaceRegex.test(str);
      }));

var nonWhitespaceRegex = /\S/g;

var name$4 = "containsNonWhitespaceChar";

var containsNonWhitespaceChar = Validator__Core2.make(name$4, (function (value) {
        return Validator__Core2.defaultErrorMessage(undefined, name$4, value);
      }), (function (str) {
        return nonWhitespaceRegex.test(str);
      }));

var onlyDigitsRegex = /^\d+$/;

var name$5 = "containsOnlyDigits";

var containsOnlyDigits = Validator__Core2.make(name$5, (function (value) {
        return Validator__Core2.defaultErrorMessage(undefined, name$5, value);
      }), (function (str) {
        return onlyDigitsRegex.test(str);
      }));

var floatRegex = /^-?\d+\.?\d*$|^\d*\.?\d+$/;

var name$6 = "isFloat";

var isFloat = Validator__Core2.make(name$6, (function (value) {
        return Validator__Core2.defaultErrorMessage(undefined, name$6, value);
      }), (function (str) {
        return floatRegex.test(str);
      }));

var Impl = {
  isShorterThan: isShorterThan,
  isLongerThan: isLongerThan,
  isHelloWorld: isHelloWorld,
  emailRegex: emailRegex,
  isEmail: isEmail,
  isNotEmpty: isNotEmpty,
  isEmpty: isEmpty,
  whitespaceRegex: whitespaceRegex,
  containsWhitespaceChar: containsWhitespaceChar,
  nonWhitespaceRegex: nonWhitespaceRegex,
  containsNonWhitespaceChar: containsNonWhitespaceChar,
  onlyDigitsRegex: onlyDigitsRegex,
  containsOnlyDigits: containsOnlyDigits,
  floatRegex: floatRegex,
  isFloat: isFloat
};

exports.Impl = Impl;
exports.isShorterThan = isShorterThan;
exports.isLongerThan = isLongerThan;
exports.isHelloWorld = isHelloWorld;
exports.emailRegex = emailRegex;
exports.isEmail = isEmail;
exports.isNotEmpty = isNotEmpty;
exports.isEmpty = isEmpty;
exports.whitespaceRegex = whitespaceRegex;
exports.containsWhitespaceChar = containsWhitespaceChar;
exports.nonWhitespaceRegex = nonWhitespaceRegex;
exports.containsNonWhitespaceChar = containsNonWhitespaceChar;
exports.onlyDigitsRegex = onlyDigitsRegex;
exports.containsOnlyDigits = containsOnlyDigits;
exports.floatRegex = floatRegex;
exports.isFloat = isFloat;
/* isHelloWorld Not a pure module */
