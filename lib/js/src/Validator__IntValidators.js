// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Validator__Core = require("./Validator__Core.js");

function greaterThan(n) {
  var nStr = String(n);
  return Validator__Core.make({
              name: "greaterThan(" + nStr + ")",
              validate: (function (value) {
                  var valueStr = String(value);
                  if (value > n) {
                    return /* Pass */0;
                  } else {
                    return /* Fail */{
                            _0: "Expected an integer greater than " + nStr + ", but got " + valueStr
                          };
                  }
                })
            });
}

function lessThan(n) {
  var nStr = String(n);
  return Validator__Core.make({
              name: "lessThan(" + nStr + ")",
              validate: (function (value) {
                  var valueStr = String(value);
                  if (value < n) {
                    return /* Pass */0;
                  } else {
                    return /* Fail */{
                            _0: "Expected an integer less than " + nStr + ", but got " + valueStr
                          };
                  }
                })
            });
}

function multipleOf(n) {
  var nStr = String(n);
  return Validator__Core.make({
              name: "multipleOf(" + nStr + ")",
              validate: (function (value) {
                  if (n === 0) {
                    if (value === 0) {
                      return /* Pass */0;
                    }
                    var valueStr = String(value);
                    return /* Fail */{
                            _0: "Expected an integer that is a multiple of " + nStr + ", but got " + valueStr
                          };
                  }
                  var valueStr$1 = String(value);
                  if (Caml_int32.mod_(value, n) === 0) {
                    return /* Pass */0;
                  } else {
                    return /* Fail */{
                            _0: "Expected an integer that is a multiple of " + nStr + ", but got " + valueStr$1
                          };
                  }
                })
            });
}

var Impl = {
  greaterThan: greaterThan,
  lessThan: lessThan,
  multipleOf: multipleOf
};

exports.Impl = Impl;
/* No side effect */
