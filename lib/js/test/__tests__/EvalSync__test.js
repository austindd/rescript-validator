// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Validator__Core2 = require("../../src/Validator__Core2.js");
var Validator__StringValidators2 = require("../../src/Validator__StringValidators2.js");

function _isValid(validationResult) {
  if (validationResult.TAG === /* Ok */0) {
    return true;
  } else {
    return false;
  }
}

function _getError_byName(validationResult, name) {
  if (validationResult.TAG === /* Ok */0) {
    return ;
  } else {
    return Js_dict.get(validationResult._0.errorMap, name);
  }
}

function _errorExists_byName(validationResult, name) {
  return _getError_byName(validationResult, name) !== undefined;
}

function _getError(validationResult, validator) {
  return _getError_byName(validationResult, Validator__Core2.getName(validator));
}

function _errorExists(validationResult, validator) {
  return _getError_byName(validationResult, Validator__Core2.getName(validator)) !== undefined;
}

function _didPass_byName(validationResult, name) {
  var b = Js_dict.get(validationResult._0.boolMap, name);
  if (b !== undefined) {
    return b;
  } else {
    return false;
  }
}

function _didPass(validationResult, validator) {
  return _didPass_byName(validationResult, Validator__Core2.getName(validator));
}

function _allTrue(boolArray) {
  return Belt_Array.everyU(boolArray, (function (item) {
                return item;
              }));
}

var Utils = {
  _isValid: _isValid,
  _getError_byName: _getError_byName,
  _errorExists_byName: _errorExists_byName,
  _getError: _getError,
  _errorExists: _errorExists,
  _didPass_byName: _didPass_byName,
  _didPass: _didPass,
  _allTrue: _allTrue
};

var isLongerThan_1 = Validator__StringValidators2.isLongerThan(1);

var isLongerThan_2 = Validator__StringValidators2.isLongerThan(2);

var isLongerThan_3 = Validator__StringValidators2.isLongerThan(3);

var isLongerThan_4 = Validator__StringValidators2.isLongerThan(4);

var isLongerThan_5 = Validator__StringValidators2.isLongerThan(5);

var isLongerThan_6 = Validator__StringValidators2.isLongerThan(6);

var isLongerThan_7 = Validator__StringValidators2.isLongerThan(7);

var isLongerThan_8 = Validator__StringValidators2.isLongerThan(8);

var isShorterThan_1 = Validator__StringValidators2.isShorterThan(1);

var isShorterThan_2 = Validator__StringValidators2.isShorterThan(2);

var isShorterThan_3 = Validator__StringValidators2.isShorterThan(3);

var isShorterThan_4 = Validator__StringValidators2.isShorterThan(4);

var isShorterThan_5 = Validator__StringValidators2.isShorterThan(5);

var isShorterThan_6 = Validator__StringValidators2.isShorterThan(6);

var isShorterThan_7 = Validator__StringValidators2.isShorterThan(7);

var isShorterThan_8 = Validator__StringValidators2.isShorterThan(8);

Jest.describe("'AND' Operator", (function (param) {
        return Jest.test("Validation errors are reported correctly", (function (param) {
                      var validator = Validator__Core2.and_(isLongerThan_1, isShorterThan_5);
                      var failed_left = Validator__Core2.validate(undefined, validator, "");
                      var failed_right = Validator__Core2.validate(undefined, validator, "1234567");
                      var passed = Validator__Core2.validate(undefined, validator, "123");
                      var result_0 = _didPass_byName(failed_left, Validator__Core2.getName(isLongerThan_1)) === false;
                      var result_1 = _didPass_byName(failed_right, Validator__Core2.getName(isShorterThan_5)) === false;
                      var result_2 = _didPass_byName(passed, Validator__Core2.getName(validator)) === true;
                      var result = [
                        result_0,
                        result_1,
                        result_2
                      ];
                      return Jest.Expect.toEqual([
                                  true,
                                  true,
                                  true
                                ], Jest.Expect.expect(result));
                    }));
      }));

Jest.describe("'OR' Operator", (function (param) {
        return Jest.test("Validation errors are reported correctly", (function (param) {
                      var v1 = Validator__Core2.or_(isShorterThan_2, isLongerThan_5);
                      var v1_leftErr_rightErr = Validator__Core2.validate(undefined, v1, "123");
                      var v1_leftOk_rightErr = Validator__Core2.validate(undefined, v1, "");
                      var v1_leftErr_rightOk = Validator__Core2.validate(undefined, v1, "123456");
                      var v1_result_0 = _didPass_byName(v1_leftErr_rightErr, Validator__Core2.getName(v1)) === false;
                      var v1_result_1 = _didPass_byName(v1_leftErr_rightOk, Validator__Core2.getName(isShorterThan_2)) === false;
                      var v1_result_2 = _didPass_byName(v1_leftOk_rightErr, Validator__Core2.getName(isLongerThan_5)) === false;
                      var v1_result = [
                        v1_result_0,
                        v1_result_1,
                        v1_result_2
                      ];
                      var v2 = Validator__Core2.or_(isLongerThan_2, isShorterThan_5);
                      var v2_leftErr_rightOk = Validator__Core2.validate(undefined, v2, "1");
                      var v2_leftOk_rightErr = Validator__Core2.validate(undefined, v2, "123456");
                      var v2_leftOk_rightOk = Validator__Core2.validate(undefined, v2, "1234");
                      var v2_result_0 = _didPass_byName(v2_leftErr_rightOk, Validator__Core2.getName(isLongerThan_2)) === false;
                      var v2_result_1 = _didPass_byName(v2_leftOk_rightErr, Validator__Core2.getName(isShorterThan_5)) === false;
                      var v2_result_2 = _didPass_byName(v2_leftOk_rightOk, Validator__Core2.getName(v2)) === true;
                      var v2_result = [
                        v2_result_0,
                        v2_result_1,
                        v2_result_2
                      ];
                      var result = [
                        v1_result,
                        v2_result
                      ];
                      return Jest.Expect.toEqual([
                                  [
                                    true,
                                    true,
                                    true
                                  ],
                                  [
                                    true,
                                    true,
                                    true
                                  ]
                                ], Jest.Expect.expect(result));
                    }));
      }));

Jest.describe("'NOT' Operator", (function (param) {
        return Jest.test("Validation errors are reported correctly", (function (param) {
                      var v1 = Validator__Core2.not_(isLongerThan_4);
                      var v2 = Validator__Core2.not_(Validator__Core2.not_(isLongerThan_4));
                      var v1_ok = Validator__Core2.validate(undefined, v1, "123");
                      var v1_err = Validator__Core2.validate(undefined, v1, "123456");
                      var v2_ok = Validator__Core2.validate(undefined, v2, "123456");
                      console.log(v2_ok);
                      var v2_err = Validator__Core2.validate(undefined, v2, "123");
                      var v1_result_0 = _didPass_byName(v1_ok, Validator__Core2.getName(v1)) === true;
                      var v1_result_1 = _didPass_byName(v1_err, Validator__Core2.getName(v1)) === false;
                      var v1_result = [
                        v1_result_0,
                        v1_result_1
                      ];
                      var v2_result_0 = _didPass_byName(v2_ok, Validator__Core2.getName(v2)) === true;
                      var v2_result_1 = _didPass_byName(v2_err, Validator__Core2.getName(v2)) === false;
                      var v2_result = [
                        v2_result_0,
                        v2_result_1
                      ];
                      var result = [
                        v1_result,
                        v2_result
                      ];
                      return Jest.Expect.toEqual([
                                  [
                                    true,
                                    true
                                  ],
                                  [
                                    true,
                                    true
                                  ]
                                ], Jest.Expect.expect(result));
                    }));
      }));

Jest.describe("'XOR' Operator", (function (param) {
        return Jest.test("Validation errors are reported correctly", (function (param) {
                      var v1 = Validator__Core2.xor(Validator__StringValidators2.containsOnlyDigits, isLongerThan_4);
                      var v1_leftOk_rightOk = Validator__Core2.validate(undefined, v1, "123456");
                      var v1_leftErr_rightErr = Validator__Core2.validate(undefined, v1, "abc");
                      var v1_leftOk_rightErr = Validator__Core2.validate(undefined, v1, "123");
                      var v1_leftErr_rightOk = Validator__Core2.validate(undefined, v1, "abcdef");
                      var v1_result_0 = _didPass_byName(v1_leftOk_rightOk, Validator__Core2.getName(v1)) === false;
                      var v1_result_1 = _didPass_byName(v1_leftErr_rightErr, Validator__Core2.getName(v1)) === false;
                      var v1_result_2 = _didPass_byName(v1_leftOk_rightErr, Validator__Core2.getName(v1)) === true;
                      var v1_result_3 = _didPass_byName(v1_leftErr_rightOk, Validator__Core2.getName(v1)) === true;
                      var v1_result = [
                        v1_result_0,
                        v1_result_1,
                        v1_result_2,
                        v1_result_3
                      ];
                      return Jest.Expect.toEqual([
                                  true,
                                  true,
                                  true,
                                  true
                                ], Jest.Expect.expect(v1_result));
                    }));
      }));

var Core;

var StringValidators;

exports.Core = Core;
exports.StringValidators = StringValidators;
exports.Utils = Utils;
exports.isLongerThan_1 = isLongerThan_1;
exports.isLongerThan_2 = isLongerThan_2;
exports.isLongerThan_3 = isLongerThan_3;
exports.isLongerThan_4 = isLongerThan_4;
exports.isLongerThan_5 = isLongerThan_5;
exports.isLongerThan_6 = isLongerThan_6;
exports.isLongerThan_7 = isLongerThan_7;
exports.isLongerThan_8 = isLongerThan_8;
exports.isShorterThan_1 = isShorterThan_1;
exports.isShorterThan_2 = isShorterThan_2;
exports.isShorterThan_3 = isShorterThan_3;
exports.isShorterThan_4 = isShorterThan_4;
exports.isShorterThan_5 = isShorterThan_5;
exports.isShorterThan_6 = isShorterThan_6;
exports.isShorterThan_7 = isShorterThan_7;
exports.isShorterThan_8 = isShorterThan_8;
/* isLongerThan_1 Not a pure module */
